services:
#  demo-otel-opensearch-worker:
#    build:
#      context: .
#      dockerfile: ../../DemoOtelOpenSearch.Worker/Dockerfile
#    depends_on:
#      - demo-otel-opensearch-api
#    environment:
#      - DemoOtelOpenSearchAPI=http://demo-otel-opensearch-api/weatherforecast
#
#  demo-otel-opensearch-api:
#    build:
#      context: .
#      dockerfile: ../../DemoOtelOpenSearch.API/Dockerfile
#    environment:
#      - ASPNETCORE_ENVIRONMENT=Development
#      - OpenTelemetry__Endpoint=http://opentelemetry-collector:4317
#      - SayHelloAPI=http://localhost:5000/weatherforecast/hello
  
  
  opentelemetry-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - /config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver
      - "55679:55679" # zpages extension
      
  loki:
    image: grafana/loki:2.6.1
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:2.6.1
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
